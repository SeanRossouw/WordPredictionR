swirl()
fit<-lm(child ~ parent,galton)
(sum(fit$residuals)/(n-2))^(1/2)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sTot<-sum((galton&child-mu)^2)
sTot<-sum((galton$child-mu)^2)
sTot<-sum((galton$child-mu)^2)
sRes<-deviance(fit)
sRes/sTot
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor^2
cor^2
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
data(mtcars)
str(mtcars)
x <- mtcars$wt
y <- mtcars$mpg
fit <- lm(y ~ x)
coef <- summary(fit)$coefficients
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2<-<- eliminate("Girth", trees)
trees2<- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
all<-lm(.,swiss)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
lm(Fertility~ Agriculture, swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec<-swiss$Examination+swiss$Catholic
ec<-swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all-efit
all-efit
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sA
summary(InsectSprays,2)
summary(InsectSprays[,2])
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit<-lm(count ~ spray,InsectSprays)
summary(fit)
summary(fit)$coef
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count ~ spray - 1,InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count ~ spray2,InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
?lm
mtcars
lm(mpg ~ cyl +wt)
lm(mpg ~ cyl +wt, mtcars)
lm(mpg ~ cyl, mtcars)
lm(mpg ~ factor(cyl) +wt, mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y~x)
influence.measures(fit)
influence.measures(fit)
library(swirl)
swirl()
rgp1()
rgp2
rgp2()
view(swiss)
View(swiss)
f
md1
mdl <- lm(fertility ~, swiss)
mdl <- lm(fertility ~ swiss)
mdl <- lm(Fertility ~ swiss)
mdl <- lm(Fertility ~ *, Swiss)
mdl <- lm(Fertility ~ , Swiss)
mdl <- 1
swirl()
mdl <- Swiss
mdl <- Swiss$Fertility
mdl <- 2
swirl()
x <- 1
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl <- lm(Fertility ~ ., swiss)
mdl2 <- lm(Fertility ~ . -Examinations, swiss)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c<-simbias()
apply(x1c, 1, mean)
fit1<-lm(Fertility ~ Agriculture, Swiss)
fit1<-lm(Fertility ~ Agriculture, swiss)
fit3<-lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1,fit3)
deviance(fit3)
d<-deviance(fit3)/43
n=deviance(fit1)-deviance(fit3)
n=(deviance(fit1)-deviance(fit3))/2
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43,
| lower.tail=FALSE)
pf(n/d, 2, 43,lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl<-glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds<-predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
library(MASS)
?shuttle
shuttle
?glm
q1<-glm(auto ~ wind,binomial, shuttle )
q1<-glm(use ~ wind,binomial, shuttle )
q1
summary(q1)$coef
(exp(coef(fit))[1]/exp(coef(fit))[2])
(exp(coef(q1))[1]/exp(coef(q1))[2])
unname(exp(coef(q1))[1]/exp(coef(q1))[2])
shuttle$use.binary <- as.integer(shuttle$use == "auto")
fit <- glm(use.binary ~ wind+magn - 1, data = shuttle, family = binomial)
summary(fit)$coef
library(ggplot2)
data(mtcars)
head(mtcars)
summary(mtcars)
mtcars$cyl  <- factor(mtcars$cyl)
mtcars$vs   <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am   <- factor(mtcars$am,labels=c("Automatic","Manual"))
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type")
?boxplot
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type", title='Figure 1: Exploratory boxplot of milage vs transmission type')
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type", label='Figure 1: Exploratory boxplot of milage vs transmission type')
boxplot(mpg ~ am, data = mtcars, ylab = "Miles Per Gallon", xlab = "Transmission Type", main='Figure 1: Exploratory boxplot of milage vs transmission type')
transt <- t.test(mpg ~ factor(am), data=mtcars)
transt$p.value
transt$estimate
linreg <- lm(mpg ~ factor(am), data=mtcars)
summary(linreg)
multireg <- lm(mpg ~ . ,data=mtcars)
summary(multireg)
multireg <- lm(formula = mpg ~ am + cyl + disp + hp + wt, data = mtcars)
summary(multireg)
plot(multireg)
plot(multireg)
plot(multireg$residuals)
plot(multireg[1])
par(mfrow = c(2, 2))
plot(multireg)
par(mfrow = c(2, 1))
plot(multireg)
par(mfrow = c(2, 2))
plot(multireg)
transt$estimate
summary(multireg)
View(mtcars)
install.packages("gvis")
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=55.6300569, lng= -6.152204, popup="Laphroaig")
my_map <- my_map %>% addMarkers(lat=55.635515, lng= -6.126205, popup="Lagavulin")
my_map <- my_map %>% addMarkers(lat=55.641931, lng= -6.113325, popup="Argbeg")
my_map <- my_map %>% addMarkers(lat=55.68213333, lng= -6.03170872, popup="Ardmore")
my_map <- my_map %>% addMarkers(lat=55.8540991, lng= -6.1093387, popup="Caol Ila")
my_map <- my_map %>% addMarkers(lat=55.7561259, lng= -6.2873101, popup="Bowmore")
my_map <- my_map %>% addMarkers(lat=55.7656877, lng= -6.3619999, popup="Bruichladdich")
my_map <- my_map %>% addMarkers(lat=55.7656877, lng= -6.3619999, popup="Bruichladdich")
my_map <- my_map %>% addMarkers(lat=55.883335, lng= -6.130126, popup="Bruichladdich")
my_map
getwd()
var bot = L.icon({
iconUrl: 'bottle.png',
shadowUrl: 'bottleshadow.png',
iconSize:     [38, 95], // size of the icon
shadowSize:   [50, 64], // size of the shadow
iconAnchor:   [22, 94], // point of the icon which will correspond to markers location
shadowAnchor: [4, 62],  // the same for the shadow
popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
});
bot<-makeIcon(iconUrl= 'bottle.png', iconWidth=31*215/230, iconHeight = 31, iconAnchorX = 31*215/230/2,iconAnchorY=16 )
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=55.6300569, lng= -6.152204, popup="Laphroaig", icon=bot)
my_map
bot<-makeIcon(iconUrl= 'bottle.png', iconWidth=35*215/230, iconHeight = 35, iconAnchorX = 31*215/230/2,iconAnchorY=16 )
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=55.6300569, lng= -6.152204, popup="Laphroaig", icon=bot)
my_map
bot<-makeIcon(iconUrl= 'bottle.png', iconWidth=40*215/230, iconHeight = 40, iconAnchorX = 31*215/230/2,iconAnchorY=16 )
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=55.6300569, lng= -6.152204, popup="Laphroaig", icon=bot)
my_map <- my_map %>% addMarkers(lat=55.635515, lng= -6.126205, popup="Lagavulin",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.641931, lng= -6.113325, popup="Argbeg",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.68213333, lng= -6.03170872, popup="Ardmore",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.8540991, lng= -6.1093387, popup="Caol Ila",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7561259, lng= -6.2873101, popup="Bowmore",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7656877, lng= -6.3619999, popup="Bruichladdich",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7656877, lng= -6.3619999, popup="Bruichladdich",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.883335, lng= -6.130126, popup="Bruichladdich",icon=bot)
my_map
bot<-makeIcon(iconUrl= 'https://d30y9cdsu7xlg0.cloudfront.net/png/17502-200.png', iconWidth=40*215/230, iconHeight = 40, iconAnchorX = 31*215/230/2,iconAnchorY=16 )
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=55.6300569, lng= -6.152204, popup="Laphroaig", icon=bot)
my_map <- my_map %>% addMarkers(lat=55.635515, lng= -6.126205, popup="Lagavulin",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.641931, lng= -6.113325, popup="Argbeg",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.68213333, lng= -6.03170872, popup="Ardmore",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.8540991, lng= -6.1093387, popup="Caol Ila",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7561259, lng= -6.2873101, popup="Bowmore",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7656877, lng= -6.3619999, popup="Bruichladdich",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7656877, lng= -6.3619999, popup="Bruichladdich",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.883335, lng= -6.130126, popup="Bruichladdich",icon=bot)
my_map
bot<-makeIcon(iconUrl= 'http://d30y9cdsu7xlg0.cloudfront.net/png/17502-200.png', iconWidth=40*215/230, iconHeight = 40, iconAnchorX = 31*215/230/2,iconAnchorY=16 )
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=55.6300569, lng= -6.152204, popup="Laphroaig", icon=bot)
my_map <- my_map %>% addMarkers(lat=55.635515, lng= -6.126205, popup="Lagavulin",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.641931, lng= -6.113325, popup="Argbeg",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.68213333, lng= -6.03170872, popup="Ardmore",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.8540991, lng= -6.1093387, popup="Caol Ila",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7561259, lng= -6.2873101, popup="Bowmore",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7656877, lng= -6.3619999, popup="Bruichladdich",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7656877, lng= -6.3619999, popup="Bruichladdich",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.883335, lng= -6.130126, popup="Bruichladdich",icon=bot)
my_map
library(leaflet)
bot<-makeIcon(iconUrl= 'http://d30y9cdsu7xlg0.cloudfront.net/png/17502-200.png', iconWidth=35*215/230, iconHeight = 35, iconAnchorX = 31*215/230/2,iconAnchorY=16 )
my_map <- leaflet() %>% addTiles()
my_map <- my_map %>% addMarkers(lat=55.6300569, lng= -6.152204, popup="Laphroaig", icon=bot)
my_map <- my_map %>% addMarkers(lat=55.635515, lng= -6.126205, popup="Lagavulin",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.641931, lng= -6.113325, popup="Argbeg",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.68213333, lng= -6.03170872, popup="Ardmore",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.8540991, lng= -6.1093387, popup="Caol Ila",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7561259, lng= -6.2873101, popup="Bowmore",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7656877, lng= -6.3619999, popup="Bruichladdich",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.7656877, lng= -6.3619999, popup="Bruichladdich",icon=bot)
my_map <- my_map %>% addMarkers(lat=55.883335, lng= -6.130126, popup="Bruichladdich",icon=bot)
my_map
library(plotly)
install.packages("plotly")
?plotly
??plotly
?plot_ly
knitr::opts_chunk$set(echo = FALSE)
library(plotly)
set.seed(2645)
lambda<-0.2
n<-40
sims<-1000
sim_exp <- replicate(sims, rexp(n, lambda))
sim_means <- apply(sim_exp, 2, mean)
p<-plot_ly(x=sim_means, type= 'histogram')
p
p <- ggplot(dat, aes(x=sims)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_grid(cond ~ .) +
geom_vline(data=theoretical_mean, aes(xintercept=theoretical_mean),
linetype="dashed", size=1, colour="red")
p <- ggplot(sim_means, aes(x=sim_means)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
facet_grid(cond ~ .) +
geom_vline(data=theoretical_mean, aes(xintercept=theoretical_mean),
linetype="dashed", size=1, colour="red")
p <- ggplot(sim_means, aes(x=number)) + geom_histogram(binwidth=.5, colour="black", fill="white")
data(package = .packages(all.available = TRUE))
data(nassCDS)
install.packages("nassCDS")
install.packages("tidyquant")
install.packages("tidyquant")
library(tidyquant)
fun.predict=function(s){
s<-stripWhitespace(removePunctuation(removeNumbers(tolower(s))))
inList<-strsplit(s, " ")[[1]]
tail<-inList[(length(inList)-1):(length(inList))]
biP<-bi[bi$w1==tail[2]]
triP<-tri[tri$w1==tail[1] & tri$w2==tail[2]]
uniP<-uni
weighting<-c(0.001,1,10)
uniP$count<-weighting[1]*uniP$count
colnames(uniP)<-c("pre","score")
uniP<- data.frame(matrix(unlist(uniP), ncol=length(uniP)))
biP$count<-weighting[2]*biP$count
colnames(biP)<-c("w1","pre","score")
biP<-biP[,2:3]
biP<-data.frame(matrix(unlist(biP), ncol=length(biP)))
triP$count<-weighting[3]*triP$count
colnames(triP)<-c("w1","w2","pre","score")
triP<-triP[,3:4]
triP<-data.frame(matrix(unlist(triP), ncol=length(triP)))
preD<-(rbind(uniP,biP,triP))
preD[,2]<-as.numeric(as.character(preD[,2]))
preD<-aggregate(X2~X1,data=preD,FUN=sum)
preD<-preD[order(preD$X2,decreasing=T), ]
preDT<-as.character(preD$X1[1:4])
return(prediction)
}
prediction("hello there")
predict("hello there")
input<-"hello there"
s<-input
s<-stripWhitespace(removePunctuation(removeNumbers(tolower(s))))
library(data.table)
library(quanteda)
library(stringr)
s<-stripWhitespace(removePunctuation(removeNumbers(tolower(s))))
inStr<-"and then"
inStr<-stripWhitespace(removePunctuation(removeNumbers(tolower(inStr))))
inStr<-removePunctuation(removeNumbers(tolower(inStr)))
library(data.table)
library(quanteda)
library(stringr)
inStr<-removePunctuation(removeNumbers(tolower(inStr)))
?removePunctuation
??removePunctuation
?tolower
?removeNumbers
library(tm)
s<-stripWhitespace(removePunctuation(removeNumbers(tolower(s))))
input<-("hEllE   tHere")
s<-inut
s<-input
s<-stripWhitespace(removePunctuation(removeNumbers(tolower(s))))
tail<-inList[(length(inList)-1):(length(inList))]
inList<-strsplit(s, " ")[[1]]
tail<-inList[(length(inList)-1):(length(inList))]
biP<-bi[bi$w1==tail[2]]
tabOne<-readRDS("tabOne.rds")
tabTwo<-readRDS("tabTwo.rds")
tabThree<-readRDS("tabThree.rds")
setkey(tabOne,w1)
setkey(tabTwo,w1,w2)
setkey(tabThree,w1,w2,w3)
tabOne<-tabOne[order(-count)]
tabTwo<-tabTwo[order(-count)]
tabThree<-tabThree[order(-count)]
uni<-tabOne[1:50]
bi<-tabTwo[1:200000]
tri<-tabThree[1:200000]
tabOne<-readRDS("tabOne.rds")
tabTwo<-readRDS("tabTwo.rds")
tabThree<-readRDS("tabThree.rds")
setkey(tabOne,w1)
setkey(tabTwo,w1,w2)
setkey(tabThree,w1,w2,w3)
tabOne<-tabOne[order(-count)]
tabTwo<-tabTwo[order(-count)]
tabThree<-tabThree[order(-count)]
uni<-tabOne[1:50]
bi<-tabTwo[1:200000]
tri<-tabThree[1:200000]
dir()
setwd("Data Science Capstone 2")
dir()
setwd("Data Science Capstone 2/PredWordShiny")
setwd("Data Science Capstone 2\PredWordShiny")
setwd("Data Science Capstone 2/ PredWordShiny")
setwd("Data Science Capstone 2/ PredWordShiny")
setwd("PredWordShiny")
tabOne<-readRDS("tabOne.rds")
tabTwo<-readRDS("tabTwo.rds")
tabThree<-readRDS("tabThree.rds")
setkey(tabOne,w1)
setkey(tabTwo,w1,w2)
setkey(tabThree,w1,w2,w3)
tabOne<-tabOne[order(-count)]
tabTwo<-tabTwo[order(-count)]
tabThree<-tabThree[order(-count)]
uni<-tabOne[1:50]
bi<-tabTwo[1:200000]
tri<-tabThree[1:200000]
biP<-bi[bi$w1==tail[2]]
triP<-tri[tri$w1==tail[1] & tri$w2==tail[2]]
uniP<-uni
weighting<-c(0.001,1,10)
uniP$count<-weighting[1]*uniP$count
colnames(uniP)<-c("pre","score")
uniP<- data.frame(matrix(unlist(uniP), ncol=length(uniP)))
biP$count<-weighting[2]*biP$count
colnames(biP)<-c("w1","pre","score")
biP<-biP[,2:3]
biP<-data.frame(matrix(unlist(biP), ncol=length(biP)))
triP$count<-weighting[3]*triP$count
colnames(triP)<-c("w1","w2","pre","score")
triP<-triP[,3:4]
triP<-data.frame(matrix(unlist(triP), ncol=length(triP)))
preD<-(rbind(uniP,biP,triP))
preD[,2]<-as.numeric(as.character(preD[,2]))
preD<-aggregate(X2~X1,data=preD,FUN=sum)
preD<-preD[order(preD$X2,decreasing=T), ]
preDT<-as.character(preD$X1[1:4])
return(preDT)
predict("hello there")
class("hello there")
fun.pred=function(s){
s<-stripWhitespace(removePunctuation(removeNumbers(tolower(s))))
inList<-strsplit(s, " ")[[1]]
tail<-inList[(length(inList)-1):(length(inList))]
biP<-bi[bi$w1==tail[2]]
triP<-tri[tri$w1==tail[1] & tri$w2==tail[2]]
uniP<-uni
weighting<-c(0.001,1,10)
uniP$count<-weighting[1]*uniP$count
colnames(uniP)<-c("pre","score")
uniP<- data.frame(matrix(unlist(uniP), ncol=length(uniP)))
biP$count<-weighting[2]*biP$count
colnames(biP)<-c("w1","pre","score")
biP<-biP[,2:3]
biP<-data.frame(matrix(unlist(biP), ncol=length(biP)))
triP$count<-weighting[3]*triP$count
colnames(triP)<-c("w1","w2","pre","score")
triP<-triP[,3:4]
triP<-data.frame(matrix(unlist(triP), ncol=length(triP)))
preD<-(rbind(uniP,biP,triP))
preD[,2]<-as.numeric(as.character(preD[,2]))
preD<-aggregate(X2~X1,data=preD,FUN=sum)
preD<-preD[order(preD$X2,decreasing=T), ]
preDT<-as.character(preD$X1[1:4])
return(preDT)
}
pred("hello there")
pred("hello there")
fun.pred("hello there")
library(data.table)
library(quanteda)
library(stringr)
library(tm)
setwd("Data Science Capstone 2")
setwd("PredWordShiny")
tabOne<-readRDS("tabOne.rds")
tabTwo<-readRDS("tabTwo.rds")
tabThree<-readRDS("tabThree.rds")
setkey(tabOne,w1)
setkey(tabTwo,w1,w2)
setkey(tabThree,w1,w2,w3)
tabOne<-tabOne[order(-count)]
tabTwo<-tabTwo[order(-count)]
tabThree<-tabThree[order(-count)]
uni<-tabOne[1:50]
bi<-tabTwo[1:200000]
tri<-tabThree[1:200000]
f.pred("General Kenobi")
f.predict=function(s){
s<-stripWhitespace(removePunctuation(removeNumbers(tolower(s))))
inList<-strsplit(s, " ")[[1]]
tail<-inList[(length(inList)-1):(length(inList))]
biP<-bi[bi$w1==tail[2]]
triP<-tri[tri$w1==tail[1] & tri$w2==tail[2]]
uniP<-uni
weighting<-c(0.001,1,10)
uniP$count<-weighting[1]*uniP$count
colnames(uniP)<-c("pre","score")
uniP<- data.frame(matrix(unlist(uniP), ncol=length(uniP)))
biP$count<-weighting[2]*biP$count
colnames(biP)<-c("w1","pre","score")
biP<-biP[,2:3]
biP<-data.frame(matrix(unlist(biP), ncol=length(biP)))
triP$count<-weighting[3]*triP$count
colnames(triP)<-c("w1","w2","pre","score")
triP<-triP[,3:4]
triP<-data.frame(matrix(unlist(triP), ncol=length(triP)))
preD<-(rbind(uniP,biP,triP))
preD[,2]<-as.numeric(as.character(preD[,2]))
preD<-aggregate(X2~X1,data=preD,FUN=sum)
preD<-preD[order(preD$X2,decreasing=T), ]
preDT<-as.character(preD$X1[1:4])
return(preDT)
}
f.predict("General Kenobi")
shiny::runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
runApp()
runApp()
runApp()
return(preDT)
colnames(biP)<-c("w1","pre","score")
biP<-biP[,2:3]
preD<-preD[order(preD$X2,decreasing=T), ]
